//  <auto-generated/> 

using MQTTnet.Client;
using Rido.IoTClient;
using Rido.IoTClient.Aws;
using Rido.IoTClient.Aws.TopicBindings;

namespace dtmi_rido_pnp_Aws
{
    public class sampleDevice : AwsPnPClient
    {
        const string modelId = "dtmi:rido:pnp:sampleDevice;1";

        public DeviceInformation Component_deviceInfo;
        public memmon Component_memMon;
        public ReadOnlyProperty<string> Property_serialNumber;
        public Command<EmptyCommandRequest, EmptyCommandResponse> Command_reboot;

        private sampleDevice(IMqttClient c)  : base(c)
        {
            Component_deviceInfo = new DeviceInformation(c, "deviceInfo");
            Component_memMon = new memmon(c, "memMon");
            Property_serialNumber = new ReadOnlyProperty<string>(c, "serialNumber");
            Command_reboot = new Command<EmptyCommandRequest, EmptyCommandResponse>(c, "reboot");
        }

        public static async Task<sampleDevice> CreateDeviceClientAsync(string connectionString, CancellationToken cancellationToken)
        {
            var cs = new ConnectionSettings(connectionString) { ModelId = modelId };
            var connection = await AwsConnectionFactory.CreateAsync(cs, cancellationToken);
            var client = new sampleDevice(connection) { ConnectionSettings = cs };
            client.InitialState = await client.GetShadowAsync();
            return client;
        }
    }
}
