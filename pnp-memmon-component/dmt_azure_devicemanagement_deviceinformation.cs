//  <auto-generated/> 
using MQTTnet.Client;
using Rido.IoTClient;
using Rido.IoTClient.AzIoTHub.TopicBindings;
using System.Text.Json;

namespace dtmi_azure_devicemanagement
{

    class deviceInfoComponent : Component<dtmi_azure_devicemanagement.DeviceInformation>
    {
        public deviceInfoComponent(IMqttClient c, string name) : base(c, name)
        {
            CV.manufacturer = new ReadOnlyProperty<string>(c, "manufacturer");
            CV.model = new ReadOnlyProperty<string>(c, "model");
            CV.softwareVersion = new ReadOnlyProperty<string>(c, "softwareVersion");
            CV.operatingSystemName = new ReadOnlyProperty<string>(c, "operatingSystemName");
            CV.processorArchitecture = new ReadOnlyProperty<string>(c, "processorArchitecture");
            CV.processorManufacturer = new ReadOnlyProperty<string>(c, "processorManufacturer");
            CV.totalMemory = new ReadOnlyProperty<long>(c, "totalMemory");
            CV.totalStorage = new ReadOnlyProperty<long>(c, "totalStorage");
        }
    }

    public class DeviceInformation : ITwinSerializable
    {
        public ReadOnlyProperty<string> manufacturer { get; set; } 
        public ReadOnlyProperty<string> model { get; set; }
        public ReadOnlyProperty<string> softwareVersion { get; set; }
        public ReadOnlyProperty<string> operatingSystemName { get; set; }
        public ReadOnlyProperty<string> processorArchitecture { get; set; }
        public ReadOnlyProperty<string> processorManufacturer { get; set; }
        public ReadOnlyProperty<long> totalMemory { get; set; }
        public ReadOnlyProperty<long> totalStorage { get; set; }

        public Dictionary<string, object> ToJsonDict()
        {
            Dictionary<string, object> dic = new Dictionary<string, object>();
            dic.Add(nameof(manufacturer), manufacturer.PropertyValue);
            dic.Add(nameof(model), model.PropertyValue);
            dic.Add(nameof(softwareVersion), softwareVersion.PropertyValue);
            dic.Add(nameof(operatingSystemName), operatingSystemName.PropertyValue);
            dic.Add(nameof(processorArchitecture), processorArchitecture.PropertyValue);
            dic.Add(nameof(processorManufacturer), processorManufacturer.PropertyValue);
            dic.Add(nameof(totalMemory), totalMemory.PropertyValue);
            dic.Add(nameof(totalStorage), totalStorage.PropertyValue);
            return dic;
        }
    }
}
